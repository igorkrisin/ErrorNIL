//
//  main.swift
//  extraHW5
//
//  Created by Игорь Крысин on 17.02.2024.
//

import Foundation

//Работа с базовыми элементами Swift (структурами, перечислениями, опционалами
//                                    
//Задание: Имитация Сетевого Запроса с Обработкой Ошибок
//Цель задания:
//Разработать программу на Swift, которая имитирует сетевой запрос и обрабатывает возможные ошибки, демонстрируя понимание работы с перечислениями (enum), структурами (struct), и опционалами.
//
//Задача:
//Вам необходимо создать программу, имитирующую сетевой запрос для получения данных. Ваша программа должна обрабатывать различные сценарии ответов, включая успешное получение данных и различные ошибки сети.
//
//Требования к реализации:
//Определите структуру People:
//
//Структура должна содержать одно свойство: name типа String.
//Определите перечисления для обработки ошибок:
//
//NetworkError: для описания различных ошибок сети. Должно содержать случаи: invalideURL, invalidReponse, и invalidData, каждый из которых принимает строку с описанием ошибки.
//HTTP: для имитации статусов HTTP ответов. Должно содержать случай response с вычисляемым свойством status, возвращающим случайное значение статуса от 200 до 500.
//Result: для представления результатов запроса. Должно содержать случаи success и failure, где success принимает строку (представляющую данные), а failure - ошибку NetworkError.
//Реализуйте функцию fetchData:
//
//Функция должна принимать строку (представляющую URL запроса) и возвращать результат в виде Result.
//Внутри функции, используйте перечисление HTTP для определения статуса ответа. Если статус в диапазоне от 200 до 299, считайте запрос успешным и возвращайте данные. В противном случае, возвращайте случайную ошибку из списка возможных.
//Организуйте массив errorRequest:
//
//Массив должен содержать возможные ошибки NetworkError.
//Выполните запрос и обработайте результат:
//
//Используйте функцию fetchData, передавая ей строку с URL.
//Используйте инструкцию switch для обработки результатов запроса: печатайте полученные данные в случае успеха или описание ошибки в случае неудачи.
//Дополнительное условие:
//Ваша программа должна максимально реалистично имитировать запрос в сеть, включая случайность ответа (успешного или с ошибкой) и обработку различных сценариев ответов.


let errorRequest: [NetworkError] = ([
    .invalidData("Отправленные данные не соответствут ожидаемому результату"),
    .invalidReponse("Полученные данные которые не соответствуют ожидаемому результату"),
    .invalideURL("Неверный URL")
])


struct People {
    var name: String
}

enum NetworkError {
    case invalideURL(String)
    case invalidReponse(String)
    case invalidData(String)
    
    func showError() {
        switch self {
        case .invalideURL(_):
            print("invalide URL")
        case .invalidReponse(_):
            print("invalid Reponse")
        case .invalidData(_):
            print("invalid data")
            
        }
    }
    
}

enum HTTP {
    case response
    var status: Int {
        return Int.random(in: 200...500)
    }
}
enum Result {
    case succec(String)
    case failure(NetworkError)
}



func fetchData(url: HTTP) -> Result {
    switch url.status {
    case (200..<300):
        return Result.succec(data)
        
    default:
        return Result.failure(errorRequest.randomElement()!)
    }
}

let user: People = People(name: "Ivanko")
let data: String = "Получены следующие данные \(user) "

let request = fetchData(url:  HTTP.response)
print(request)

